#include "SavingAccount.hpp"
int SavingAccount::SavingIdentifier = 0;


SavingAccount::SavingAccount(std::string nameVal, double balanceVal, double interestVal)
	:name(nameVal), balance(balanceVal), interestRate(interestVal), id(++SavingIdentifier){};

SavingAccount::SavingAccount(std::string nameVal, double balanceVal)
	:SavingAccount(nameVal, balanceVal, defInterestRate){};

SavingAccount::SavingAccount(std::string nameVal)
	:SavingAccount(nameVal,0.0,defInterestRate){};

SavingAccount::SavingAccount()
	:SavingAccount("Unnamed Saving account", 0.0, defInterestRate){};


bool SavingAccount::deposit(double amount){
	if(amount <= 0) {
		std::cout << "Can deposit an amount lesser or equal than zero" << std::endl;
		return false;
	}
	amount = amount + ((amount * interestRate)/100);
	balance += amount;
	return true;
}

bool SavingAccount::withdraw(double amount){
	if(amount > balance) {
		std::cout << "Cant withdraw the amount of " << amount << "\nNot enough funds" << std::endl;
		return false;
	}
	balance -=amount;
	return true;
}

std::ostream & operator<<(std::ostream &os, const SavingAccount &acc){
	os << "[Account type: Saving, Name: " << acc.name << ", Balance: " << acc.balance << ", Interest rate: " <<acc.interestRate << ", Id: " << acc.id <<  "]\n";
	return os;
}
