#include <iostream>
#include <string>
#include <memory>
using namespace std;

class Base{
public:
	void sayClass() const{
		cout << "Base Class"  << endl;
	}
};

class Derived : public Base{
public:
	void sayClass() const{
		cout << "Derived Class" << endl;
	}
};

void greetings(const Base &b){
	cout << "Greetings ";
	b.sayClass();
}

int main(){
	Base b;
	b.sayClass();
	greetings(b);

	Derived d;
	d.sayClass(); //static binding says that it is base
	greetings(d);

	Base * ptr = new Derived();
	ptr -> sayClass(); //static binding says that it is base

	unique_ptr<Base> ptr1 = make_unique<Derived>();
	ptr1 -> sayClass(); //static binding says that it is base
	delete ptr;
	return 0;
}
