#include <iostream>
#include <vector>

using namespace std;

class Shape{ //Abstract Base Class
private:
	//Attributtes commons to all shapes
public:
	virtual void draw() =0; //Pure virtual function
	virtual void rotate() =0; //Pure virtual function
	virtual ~Shape();
};

class OpenShape: public Shape{ //Abstract Class
public:
	virtual ~OpenShape();
};

class ClosedShape: public Shape{ //Abstract Class
public:
	virtual ~ClosedShape();
};


class Circle : public ClosedShape{ //Concrete Class
public:
	virtual void draw() override{
		cout << "Drawing a circle" << endl;
	}
	virtual void rotate() override{
		cout << "Rotating a circle" << endl;
	}
	virtual ~Circle();
};

class Line : public OpenShape{
public:
	virtual void draw() override{ //Concrete Class
		cout << "Drawing a Line" << endl;
	}
	virtual void rotate() override{
		cout << "Rotating a Line" << endl;
	}
	virtual ~Line();
};


